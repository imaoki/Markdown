/*! Â© 2022 imaoki | MIT License | https://github.com/imaoki */;struct MarkdownStruct (public UseDefinitionLists = true,public UsePipeTables = true,public UseSoftlineBreakAsHardlineBreak = true,private context,private markdigAssembly,private markdownClass,private pathUtility,private pipeline,private markdigDll = @".\Markdig\Markdig.dll",public fn Install = (if isProperty ::startupLoader #RegisterFile do (::startupLoader.RegisterFile (getSourceFileName()););format "[install]::MarkdownStruct\n";ok;),public fn ShowTypes = (local types = this.markdigAssembly.GetTypes();for type in types do (format "\"%\"\n" type.FullName;);ok;),public fn ToHtml input = (::std.StringUtility.TrimEnd (this.markdownClass.ToHtml input this.pipeline this.context;) "\n";),public fn Uninstall = (if isProperty ::startupLoader #UnregisterFile do (::startupLoader.UnregisterFile (getSourceFileName()););format "[uninstall]::MarkdownStruct\n";ok;),private fn initialize = (local dllPath = (this.pathUtility.GetFullPath this.markdigDll);this.markdigAssembly = DotNet.LoadAssembly dllPath;this.markdownClass = DotNetClass "Markdig.Markdown";this.context = DotNetObject "Markdig.MarkdownParserContext";local mdExtClass = DotNetClass "Markdig.MarkdownExtensions";local pipelineBuilder = DotNetObject "Markdig.MarkdownPipelineBuilder";if this.UseDefinitionLists do (pipelineBuilder = mdExtClass.UseDefinitionLists pipelineBuilder;);if this.UsePipeTables do (local pipeTableOptions = DotNetObject "Markdig.Extensions.Tables.PipeTableOptions";pipelineBuilder = mdExtClass.UsePipeTables pipelineBuilder pipeTableOptions;);if this.UseSoftlineBreakAsHardlineBreak do (pipelineBuilder = mdExtClass.UseSoftlineBreakAsHardlineBreak pipelineBuilder;);this.pipeline = pipelineBuilder.Build();ok;),public fn StructName = #MarkdownStruct,public fn Dump indent:"" out:listener = (format "%MarkdownStruct\n" indent to:out;format "%  UseDefinitionLists:%\n" indent this.UseDefinitionLists to:out;format "%  UsePipeTables:%\n" indent this.UsePipeTables to:out;format "%  UseSoftlineBreakAsHardlineBreak:%\n" indent this.UseSoftlineBreakAsHardlineBreak to:out;ok;),public fn Equals obj = (local isEqualStructName = isStruct obj and isProperty obj #StructName and classOf obj.StructName == MAXScriptFunction and obj.StructName() == this.StructName();local isEqualProperties = true;isEqualStructName and isEqualProperties;),on Create do (this.pathUtility = ::std.PathUtilityStruct (getSourceFileName());this.initialize();););::MarkdownStruct.Install();::MarkdownStruct;
